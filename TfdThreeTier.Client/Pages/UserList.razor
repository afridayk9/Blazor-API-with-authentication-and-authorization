@page "/users"
@inject IUserDetailService UserDetailService
@inject IToastService ToastService
@inject ILogger<UserList> Logger

<div class="container">
    <h1>Users and Roles</h1>
    <div class="row">
        <div class="col-lg-12">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Email</th>
                        <th>Roles</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Users)
                    {
                        <tr>
                            <td>@user.Email</td>
                            <td>@string.Join(", ", user.Roles)</td>
                            <td>
                                <button class="btn btn-primary" @onclick="() => EditUser(user)">Edit</button>
                                <button class="btn btn-danger" @onclick="() => DeleteUser(user.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    @if (IsEditing)
    {
        <div class="row">
            <div class="col-lg-12">
                <EditForm Model="EditingUser" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label for="email">Email</label>
                        <InputText id="email" class="form-control" @bind-Value="EditingUser.Email" />
                    </div>
                    <div class="form-group">
                        <label for="roles">Roles</label>
                        <select id="roles" class="form-control" @bind="SelectedRole">
                            <option value="">Select a role</option>
                            <option value="Admin">Admin</option>
                            <option value="User">User</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <button class="btn btn-primary" type="submit">Save</button>
                        <button class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    }
</div>

@code {
    private List<UserDetail> Users = new();
    private UserDetail EditingUser = new();
    private bool IsEditing = false;
    private string SelectedRole = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Users = await UserDetailService.GetAllUsersWithRolesAsync();
    }

    private void EditUser(UserDetail user)
    {
        EditingUser = new UserDetail
            {
                Id = user.Id,
                Email = user.Email,
                Roles = new List<string>(user.Roles)
            };
        IsEditing = true;
    }

    private async Task HandleValidSubmit()
    {
        await UserDetailService.UpdateUserAsync(EditingUser);
        ToastService.ShowSuccess("User updated successfully.");
        Users = await UserDetailService.GetAllUsersWithRolesAsync();
        IsEditing = false;
    }

    private void CancelEdit()
    {
        IsEditing = false;
    }

    private async Task DeleteUser(int userId)
    {
        Logger.LogInformation($"Attempting to delete user with ID: {userId}");
        if (userId == 0)
        {
            Logger.LogError("User ID is 0, which is invalid.");
            return;
        }

        await UserDetailService.DeleteUserAsync(userId);
        ToastService.ShowSuccess("User deleted successfully.");
        Users = await UserDetailService.GetAllUsersWithRolesAsync();
    }

    private void AddRole()
    {
        if (!string.IsNullOrWhiteSpace(SelectedRole) && !EditingUser.Roles.Contains(SelectedRole))
        {
            EditingUser.Roles.Add(SelectedRole);
            SelectedRole = string.Empty;
        }
    }
}









